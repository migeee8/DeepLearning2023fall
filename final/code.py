# -*- coding: utf-8 -*-
"""“SpeakersClassifier”.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xAKy7vg4pW1My5qNci_6PEjVejBoSZkF

# 任务简介
- 通过输入一段语音，辨别说话的speaker（语音对象）
- 神经网络中加入了Transformer的Encoder层
- 通过self-Attention实现编码和特征提取
- 数据链接: [link](https://github.com/googly-mingto/ML2023HW4/releases)

# 准备工作
### 下载数据集
"""

!wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partaa
!wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partab
!wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partac
!wget https://github.com/googly-mingto/ML2023HW4/releases/download/data/Dataset.tar.gz.partad

!cat Dataset.tar.gz.part* > Dataset.tar.gz
!rm Dataset.tar.gz.partaa
!rm Dataset.tar.gz.partab
!rm Dataset.tar.gz.partac
!rm Dataset.tar.gz.partad
# unzip the file
!tar zxf Dataset.tar.gz
!rm Dataset.tar.gz

import numpy as np
import torch
import random

# 设置随机种子
def set_seed(seed):
    np.random.seed(seed)
    random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

set_seed(87)

"""# 数据集载入

- 数据集来源：[Voxceleb2](https://www.robots.ox.ac.uk/~vgg/data/voxceleb/vox2.html)
- 从Voxceleb2中随机选择600位speakers

- 输入参数:
  - data_dir: 数据文件路径
  - metadata_path: 训练数据metadata的路径
  - segment_len: 训练所设置的单段语音片段数

- metadata中的数据
  - "n_mels"
  - "speakers":
    - Key: id
    - value: "feature_path"， "mel_len"

"""

import os
import json
import torch
import random
from pathlib import Path
from torch.utils.data import Dataset
from torch.nn.utils.rnn import pad_sequence


class myDataset(Dataset):
	'''数据集的载入和初步处理'''

	def __init__(self, data_dir, segment_len=128):
		self.data_dir = data_dir  # data路径
		self.segment_len = segment_len  # 片段长度

		# 载入语音对象和他们对应的id信息
		mapping_path = Path(data_dir) / "mapping.json"	# "./Dataset/mapping.json"
		mapping = json.load(mapping_path.open())
		self.speaker2id = mapping["speaker2id"]	# 建立id映射表

		# 载入训练数据的matadata
		metadata_path = Path(data_dir) / "metadata.json" # "./Dataset/metadata.json"
		metadata = json.load(open(metadata_path))["speakers"] # 将“speakers”key对应的value存入metadata

		self.speaker_num = len(metadata.keys()) # speaker的总数
		self.data = []
		# 对每个speaker
		for speaker in metadata.keys():
			# 对一个speaker的每个语句
			for utterances in metadata[speaker]:
				# 保存到data
				self.data.append([utterances["feature_path"], self.speaker2id[speaker]]) # [speaker语音特征数据的路径，speaker的id]

	def __len__(self):
			return len(self.data)

	def __getitem__(self, index):
		'''对数据进行处理和分割'''
		feat_path, speaker = self.data[index]
		# 加载预处理过的mel-spetrogram数据
		mel = torch.load(os.path.join(self.data_dir, feat_path))

		# 将语音数据分割成长度为 segment_len 的片段，以便用于训练模型
		if len(mel) > self.segment_len:
			# 随机选择起始点
			start = random.randint(0, len(mel) - self.segment_len)
			# 获得指定长度的片段
			mel = torch.FloatTensor(mel[start:start+self.segment_len])
		else:
			mel = torch.FloatTensor(mel)

		# ID 转换为long 类型，以便后续计算损失函数。
		speaker = torch.FloatTensor([speaker]).long()
		return mel, speaker

	def get_speaker_number(self):
		'''得到speaker的数量'''
		return self.speaker_num

"""## 数据分批
- 将数据分批方便后续的迭代训练。
- 将数据分为90%的训练集和10%的验证集
"""

import torch
from torch.utils.data import DataLoader, random_split
from torch.nn.utils.rnn import pad_sequence


def collate_batch(batch):
	"""将数据分批"""
	mel, speaker = zip(*batch)
	# 数据填充：使同一批次（batch）内的序列长度相同，这样才能将它们一起输入神经网络进行处理
	mel = pad_sequence(mel, batch_first=True, padding_value=-20)
	# mel: (batch size, length, 40)
	return mel, torch.FloatTensor(speaker).long()


def get_dataloader(data_dir, batch_size, n_workers):
	"""生成dataloader"""
	dataset = myDataset(data_dir)
	speaker_num = dataset.get_speaker_number()
	# 分为训练集和验证集
	trainlen = int(0.9 * len(dataset))
	lengths = [trainlen, len(dataset) - trainlen]
	trainset, validset = random_split(dataset, lengths)

	# 创建训练集的loader和验证集的loader
	train_loader = DataLoader(
		trainset,
		batch_size=batch_size,
		shuffle=True,
		drop_last=True,
		num_workers=n_workers,
		pin_memory=True,
		collate_fn=collate_batch,
	)
	valid_loader = DataLoader(
		validset,
		batch_size=batch_size,
		num_workers=n_workers,
		drop_last=True,
		pin_memory=True,
		collate_fn=collate_batch,
	)

	return train_loader, valid_loader, speaker_num

"""# 训练模型定义
- TransformerEncoderLayer:
  - 最基本的transformer encoder layer。
  - transformer模型来自于论文[Attention Is All You Need](https://arxiv.org/abs/1706.03762)

  - Parameters:
    - d_model: 输入数据的特征维度.

    - nhead: 注意力机制中头的数量.

    - dim_feedforward: Transformer 编码器层中前馈神经网络的隐藏层大小 (default=2048).

    - dropout: 随机失活（dropout）的概率，用于在训练期间防止模型过拟合 (default=0.1).

    - activation: 中间隐藏层的激活函数 (default=relu).
"""

import torch
import torch.nn as nn
import torch.nn.functional as F


class Classifier(nn.Module):
	def __init__(self, d_model=80, n_spks=600, dropout=0.1):
		super().__init__()
		# 将输入特征的维度mel-spetrogram的特征维度 40 投射到d_model 80
		self.prenet = nn.Linear(40, d_model)
		self.encoder_layer = nn.TransformerEncoderLayer(
			d_model=d_model, dim_feedforward=256, nhead=2
		)

		# 将特征从 d_model 80 投射到预测说话者数量 n_spks 600
		self.pred_layer = nn.Sequential(
			nn.Linear(d_model, d_model),
			nn.Sigmoid(), # 最后一层使用sigmoid激活函数
			nn.Linear(d_model, n_spks),
		)

	def forward(self, mels):
		"""
		前向传播过程
		args:
			mels: (batch size, length, 40)
		return:
			out: (batch size, n_spks)
		"""
		# out: (batch size, length, d_model) 40 -> 80
		out = self.prenet(mels)
		# 维度置换 out: (length, batch size, d_model) The encoder layer expect features in the shape of (length, batch size, d_model).
		out = out.permute(1, 0, 2)
		# 传递给TransformerEncoderLayer，进行编码和提取特征。
		out = self.encoder_layer(out)
		# 再次进行维度置换，使其返回原始形状 out: (batch size, length, d_model)
		out = out.transpose(0, 1)
		# mean pooling 平均值池化
		stats = out.mean(dim=1)
		# 最终预测的分类器 out: (batch, n_spks)
		out = self.pred_layer(stats)
		return out

"""## 学习率调度
- 在 Transformer 架构中，学习率的设计与 CNN 不同。以前的研究表明，对于使用 Transformer 架构的模型训练，学习率的预热是有用的。
- 预热过程
  - 在开始阶段将学习率设置为 0。
  - 在预热期间，学习率从 0 线性增加到初始学习率。   

- 在训练初期让模型逐渐适应学习，避免初始时步长过大导致模型难以收敛。
- 这种线性增加的策略有助于使模型更平稳地达到最优值，并且通常在初始训练阶段提供更稳定的梯度。
"""

import math

import torch
from torch.optim import Optimizer
from torch.optim.lr_scheduler import LambdaLR


def get_cosine_schedule_with_warmup(
	optimizer: Optimizer,
	num_warmup_steps: int,
	num_training_steps: int,
	num_cycles: float = 0.5,
	last_epoch: int = -1,
):
	"""
	创建学习率调度器，根据余弦函数的值调整学习率。它包括了一个预热阶段，在这个阶段内学习率线性地从0增加到优化器中设置的初始学习率。

	Args:
		optimizer ：要调度学习率的优化器。
		num_warmup_steps : 预热阶段的步数，即学习率从0增加到设定初始值的阶段所需的步数。
		num_training_steps: 总的训练步数，包括预热阶段和后续的训练步数。
		num_cycles: 余弦调度中的波数。默认为0.5，表示在余弦曲线中的波数，默认是从最大值下降到0后的一半余弦波。
		last_epoch：可选参数，用于恢复训练时设置最后一个epoch的索引，默认为-1。

	Return:
		:obj:返回一个 torch.optim.lr_scheduler.LambdaLR 对象，其中包含了设定好的学习率调度。
	"""
	def lr_lambda(current_step):
		# 预热
		if current_step < num_warmup_steps:
			return float(current_step) / float(max(1, num_warmup_steps))
		# 调整学习率
		progress = float(current_step - num_warmup_steps) / float(
			max(1, num_training_steps - num_warmup_steps)
		)
		return max(
			0.0, 0.5 * (1.0 + math.cos(math.pi * float(num_cycles) * 2.0 * progress))
		)

	return LambdaLR(optimizer, lr_lambda, last_epoch)

"""## 训练模型应用
- 对一个批次的数据进行模型前向传播并计算损失和准确率。
"""

import torch


def model_fn(batch, model, criterion, device):

	mels, labels = batch  # 音频特征 mels 和 对应的标签 labels
	mels = mels.to(device)
	labels = labels.to(device)

	outs = model(mels) #  放进模型训练

	loss = criterion(outs, labels)  # 计算训练完的损失值

	# 获得最高概率的speaker的index
	preds = outs.argmax(1)
	# 计算准确率 （一个批次的平均值）
	accuracy = torch.mean((preds == labels).float())

	return loss, accuracy

"""# 验证训练结果
- 计算验证集的准确率
"""

from tqdm import tqdm
import torch


def valid(dataloader, model, criterion, device):
	"""在验证集上验证"""

	model.eval()  # 模型设置为评估模式

	# running_loss和running_accuracy用于跟踪累积的损失和准确率
	running_loss = 0.0
	running_accuracy = 0.0

	# 创建进度条显示验证进度
	pbar = tqdm(total=len(dataloader.dataset), ncols=0, desc="Valid", unit=" uttr")

	# 使用enumerate遍历验证集dataloader中的每个批次。
	for i, batch in enumerate(dataloader):
		with torch.no_grad(): # 不更新梯度
			# model_fn函数对每个批次进行模型前向传播，计算损失和准确率
			loss, accuracy = model_fn(batch, model, criterion, device)
			# 累加到running_loss和running_accuracy中
			running_loss += loss.item()
			running_accuracy += accuracy.item()

		# 更新进度条以反映验证进度
		pbar.update(dataloader.batch_size)
		pbar.set_postfix(
			loss=f"{running_loss / (i+1):.2f}",
			accuracy=f"{running_accuracy / (i+1):.2f}",
		)

	pbar.close()
	model.train()  # 模型设置为训练模式

	return running_accuracy / len(dataloader)

"""# 用于训练模型的主函数
- 训练循环的主函数
"""

from tqdm import tqdm

import torch
import torch.nn as nn
from torch.optim import AdamW
from torch.utils.data import DataLoader, random_split

# 定义训练所需参数
def parse_args():
	"""arguments"""
	config = {
		"data_dir": "./Dataset",  # 数据路径
		"save_path": "model.ckpt",  # model保存路径
		"batch_size": 32,  # 每个批次训练的样本数。
		"n_workers": 8,		# 数据加载器中用于加载数据的工作线程数
		"valid_steps": 2000,	# 进行验证的间隔步数。
		"warmup_steps": 1000,	# 学习率warmup阶段的步数
		"save_steps": 10000,	# 保存模型的间隔步数
		"total_steps": 70000,	# 总的训练步数
	}

	return config


def main(
	data_dir,
	save_path,
	batch_size,
	n_workers,
	valid_steps,
	warmup_steps,
	total_steps,
	save_steps,
):
	"""主函数"""
	# 设备设置
	device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
	print(f"[Info]: Use {device} now!")

	# 载入数据
	train_loader, valid_loader, speaker_num = get_dataloader(data_dir, batch_size, n_workers)
	train_iterator = iter(train_loader) # 创建训练集的迭代器。
	print(f"[Info]: Finish loading data!",flush = True)

	# 创建训练模型
	model = Classifier(n_spks=speaker_num).to(device)
	criterion = nn.CrossEntropyLoss()  # 定义损失函数为交叉熵损失。
	optimizer = AdamW(model.parameters(), lr=1e-3)  # 定义优化器为AdamW优化器。
	scheduler = get_cosine_schedule_with_warmup(optimizer, warmup_steps, total_steps) # 设置学习率调度器
	print(f"[Info]: Finish creating model!",flush = True)

	# 初始化用于跟踪最佳准确率和最佳状态的变量
	best_accuracy = -1.0
	best_state_dict = None

	# 创建进度条来显示训练的步数
	pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")

	# 每次迭代执行下面的操作：
	for step in range(total_steps):
		# 尝试从训练数据集中获取下一个批次的数据，如果遍历完一个epoch，则重新创建迭代器。
		try:
			batch = next(train_iterator)
		except StopIteration:
			train_iterator = iter(train_loader)
			batch = next(train_iterator)

		# 前向传播 计算损失、准确率
		loss, accuracy = model_fn(batch, model, criterion, device)
		batch_loss = loss.item()
		batch_accuracy = accuracy.item()

		# 反向传播 执行模型参数的梯度更新
		loss.backward()
		optimizer.step()
		scheduler.step()
		optimizer.zero_grad()

		# 更新进度条显示当前的训练状态
		pbar.update()
		pbar.set_postfix(
			loss=f"{batch_loss:.2f}",
			accuracy=f"{batch_accuracy:.2f}",
			step=step + 1,
		)

		# 在迭代了一定次数后 验证检查模型性能
		if (step + 1) % valid_steps == 0:
			pbar.close()

			valid_accuracy = valid(valid_loader, model, criterion, device)

			# 验证当前是否为最好的模型
			if valid_accuracy > best_accuracy:
				# 如果是 更新最佳模型参数
				best_accuracy = valid_accuracy
				best_state_dict = model.state_dict()

			pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")

		# 把目前为止最好的模型保存到model的保存路径下
		if (step + 1) % save_steps == 0 and best_state_dict is not None:
			torch.save(best_state_dict, save_path)
			pbar.write(f"Step {step + 1}, best model saved. (accuracy={best_accuracy:.4f})")

	pbar.close()


if __name__ == "__main__":
	main(**parse_args())

"""# 预测

## 设置预测数据集
"""

import os
import json
import torch
from pathlib import Path
from torch.utils.data import Dataset


class InferenceDataset(Dataset):
	'''加载数据集并创建训练和验证数据加载器'''
	def __init__(self, data_dir):
		testdata_path = Path(data_dir) / "testdata.json"
		metadata = json.load(testdata_path.open())
		self.data_dir = data_dir
		self.data = metadata["utterances"] # data设置为从"testdata.json"文件中提取的"utterances"数据。

	def __len__(self):
		return len(self.data)

	def __getitem__(self, index):
		utterance = self.data[index]
		feat_path = utterance["feature_path"]
		mel = torch.load(os.path.join(self.data_dir, feat_path))

		return feat_path, mel


def inference_collate_batch(batch):
	'''分批次'''
	feat_paths, mels = zip(*batch)

	return feat_paths, torch.stack(mels)

"""## 用于预测的主函数"""

import json
import csv
from pathlib import Path
from tqdm.notebook import tqdm

import torch
from torch.utils.data import DataLoader

def parse_args():
	"""arguments"""
	config = {
		"data_dir": "./Dataset",	# 数据集路径
		"model_path": "./model.ckpt", # 训练得到model保存的路径
		"output_path": "./output.csv", # 预测结果输出文件的路径
	}

	return config


def main(
	data_dir,
	model_path,
	output_path,
):
	"""主函数"""
	# 设备设置
	device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
	print(f"[Info]: Use {device} now!")

	# 载入speaker的id映射表，方便后续预测结果从id转为string
	mapping_path = Path(data_dir) / "mapping.json"
	mapping = json.load(mapping_path.open())

	# 载入预测数据集
	dataset = InferenceDataset(data_dir)
	dataloader = DataLoader(
		dataset,
		batch_size=1,
		shuffle=False,
		drop_last=False,
		num_workers=8,
		collate_fn=inference_collate_batch,
	)
	print(f"[Info]: Finish loading data!",flush = True)

	# 载入之前的训练模型
	speaker_num = len(mapping["id2speaker"])
	model = Classifier(n_spks=speaker_num).to(device)
	model.load_state_dict(torch.load(model_path))
	model.eval()
	print(f"[Info]: Finish creating model!",flush = True)

	# 进行预测 将结果保存在一张表格中
	results = [["Id", "Category"]] # 储存结果的二维表
	for feat_paths, mels in tqdm(dataloader):
		with torch.no_grad():  # 禁用梯度计算
			mels = mels.to(device)
			outs = model(mels) # 丢进模型
			preds = outs.argmax(1).cpu().numpy() # 得到预测结果
			for feat_path, pred in zip(feat_paths, preds):
				results.append([feat_path, mapping["id2speaker"][str(pred)]]) # 加入二维表

	# 写入文件
	with open(output_path, 'w', newline='') as csvfile:
		writer = csv.writer(csvfile)
		writer.writerows(results)


if __name__ == "__main__":
	main(**parse_args())